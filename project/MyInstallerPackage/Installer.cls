Class MyInstallerPackage.Installer
{

XData setup [ XMLNamespace = INSTALLER ]
{
<Manifest>
<Var Name="ProductionName" Value="Demo.Production"/>

<Namespace Name="${NAMESPACE}" Create="no">
	<Invoke Class="%SYSTEM.OBJ" Method="ImportDir" CheckStatus="true">
		<Arg Value="${SRCDIR}" />
		<Arg Value="" />
		<Arg Value="ck" />
		<Arg Value=".e" />
		<Arg Value="1" />
	</Invoke>
 	<Production Name="${ProductionName}" AutoStart="1">
	</Production>
</Namespace>
</Manifest>
}

XData setup2 [ XMLNamespace = INSTALLER ]
{
<Manifest>
<Namespace Name="${NAMESPACE}" Create="no">
 	<CSPApplication Url="/csp/${NAMESPACE}" Directory="${CSPDIR}${NAMESPACE}" Resource=""/>
</Namespace>
</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setupMethod(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "setup")
}

ClassMethod setupMethod2(ByRef pVars, pLogLevel As %Integer = 3, pInstaller As %Installer.Installer, pLogger As %Installer.AbstractLogger) As %Status [ CodeMode = objectgenerator, Internal ]
{
    #; Let our XGL document generate code for this method. 
    Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "setup2")
}

ClassMethod setup(ByRef tVars) As %Status
{
	Set tSC='$$$OK
	Try {
		If '$D(tVars("SRCDIR")) { Set tVars("SRCDIR")="/project" }
		If '$D(tVars("NAMESPACE")) { Set tVars("NAMESPACE")="MIRRORNS" }
		$$$THROWONERROR(tSC,..setupMethod(.tVars))
	} Catch(e) {
		Set tSC=e.AsStatus()
	}
	
  Return tSC
}

ClassMethod setup2(ByRef tVars) As %Status
{
	Set tSC='$$$OK
	Try {
		If '$D(tVars("SRCDIR")) { Set tVars("SRCDIR")="/project" }
		If '$D(tVars("NAMESPACE")) { Set tVars("NAMESPACE")="mirrorns" }
		$$$THROWONERROR(tSC,..setupMethod2(.tVars))
	} Catch(e) {
		Set tSC=e.AsStatus()
	}

	Set oldns=$NAMESPACE
	New $NAMESPACE
	Set $NAMESPACE="%SYS"

	Set webapp="/csp/"_tVars("NAMESPACE")_"/api/"
	Set tSC = ##Class(Security.Applications).Create(webapp)
	Set tSC = ##Class(Security.Applications).Get(webapp,.props)
	$$$ThrowOnError(tSC)
	Set props("DispatchClass")="MyApp.disp"
	Set props("Resource")=""
	Set props("MatchRoles")=":%All"
	Set props("NameSpace")=tVars("NAMESPACE")
	Kill props("Type")
	Set tSC = ##Class(Security.Applications).Modify(webapp,.props)
	$$$ThrowOnError(tSC)

	#; accept mutiple names as application path, such as "ap1, ap1a".
	#; See https://docs.intersystems.com/irislatest/csp/docbook/Doc.View.cls?KEY=GCGI_remote_csp#GCGI_change_server_name
	Do $System.CSP.SetConfig("CSPConfigName",$SYSTEM.Util.GetEnviron("CSPConfigName"))
	Set $NAMESPACE=oldns
	
  Return tSC
}

}
